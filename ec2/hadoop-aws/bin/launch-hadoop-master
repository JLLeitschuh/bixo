#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Launch or find an EC2 Hadoop master instance:
# launch-hadooop-master <cluster> [<type> [<price>]]

if [ -z $1 ]; then
  echo "Cluster name required!"
  exit -1
fi

CLUSTER=$1
INSTANCE_TYPE=$2
SPOT_PRICE=$3

# Import variables
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
. ${HADOOP_EC2_ENV:-$bin/hadoop-ec2-env.sh}

if [ -z $AWS_ACCOUNT_ID ]; then
  echo "Please set AWS_ACCOUNT_ID in ${HADOOP_EC2_ENV:-$bin/hadoop-ec2-env.sh}."
  exit -1
fi

echo "Testing for existing master in group '$CLUSTER'..."
MASTER_EC2_HOST=`ec2-describe-instances | awk '"RESERVATION" == $1 && "'$CLUSTER_MASTER'" == $4, "RESERVATION" == $1 && "'$CLUSTER_MASTER'" != $4'`
MASTER_EC2_HOST=`echo "$MASTER_EC2_HOST" | awk '"INSTANCE" == $1 && "running" == $6 {print $4}'`

if [ -n "$MASTER_EC2_HOST" ]; then
  echo "Master already running on: $MASTER_EC2_HOST"
  MASTER_HOST=`ec2-describe-instances $INSTANCE | grep INSTANCE | grep running | grep $MASTER_EC2_HOST | awk '{print $5}'`
  echo $MASTER_HOST > $MASTER_PRIVATE_IP_PATH
  echo $MASTER_EC2_HOST > $MASTER_IP_PATH
  exit 0
fi

if [ -n "$INSTANCE_TYPE" ]; then
  if [ -n "$REQUIRED_INSTANCE_TYPE" ] && [ "$INSTANCE_TYPE" != "$REQUIRED_INSTANCE_TYPE" ]; then
    echo "This project requires $REQUIRED_INSTANCE_TYPE instances (see REQUIRED_INSTANCE_TYPE in $PROJECT_EC2_BASEDIR/setenv.sh)"
    exit -1
  fi
else
  echo 'Instance <type> parameter not specified - using $DEFAULT_INSTANCE_TYPE'" ($DEFAULT_INSTANCE_TYPE)."
  INSTANCE_TYPE=$DEFAULT_INSTANCE_TYPE
fi

echo "Checking definition of group '$CLUSTER'..."
ec2-describe-group | egrep "[[:space:]]$CLUSTER_MASTER[[:space:]]" > /dev/null
if [ ! $? -eq 0 ]; then
  echo "Creating group $CLUSTER_MASTER"
  ec2-add-group $CLUSTER_MASTER -d "Group for Hadoop Master."
  ec2-authorize $CLUSTER_MASTER -o $CLUSTER_MASTER -u $AWS_ACCOUNT_ID
  ec2-authorize $CLUSTER_MASTER -p 22    # ssh

  if [ $ENABLE_WEB_PORTS == "true" ]; then
    ec2-authorize $CLUSTER_MASTER -p 50030 # JobTracker web interface
    ec2-authorize $CLUSTER_MASTER -p 50060 # TaskTracker web interface
    ec2-authorize $CLUSTER_MASTER -p 50070 # NameNode web interface
    ec2-authorize $CLUSTER_MASTER -p 50075 # DataNode web interface
  fi
fi

ec2-describe-group | egrep "[[:space:]]$CLUSTER[[:space:]]" > /dev/null
if [ ! $? -eq 0 ]; then
  echo "Creating group $CLUSTER"
  ec2-add-group $CLUSTER -d "Group for Hadoop Slaves."
  ec2-authorize $CLUSTER -o $CLUSTER -u $AWS_ACCOUNT_ID
  ec2-authorize $CLUSTER -p 22    # ssh

  if [ $ENABLE_WEB_PORTS == "true" ]; then
    ec2-authorize $CLUSTER -p 50030 # JobTracker web interface
    ec2-authorize $CLUSTER -p 50060 # TaskTracker web interface
    ec2-authorize $CLUSTER -p 50070 # NameNode web interface
    ec2-authorize $CLUSTER -p 50075 # DataNode web interface
  fi

  ec2-authorize $CLUSTER_MASTER -o $CLUSTER -u $AWS_ACCOUNT_ID
  ec2-authorize $CLUSTER -o $CLUSTER_MASTER -u $AWS_ACCOUNT_ID
fi

# Find an appropriate Amazon Machine Image.
# If $AMI_IMAGE is not set, we look for an AMI matching $INSTANCE_TYPE among those
# accessible by this user (including the public ones).
#
# TODO CSc Move this to launch-hadoop-cluster (exporting variables) so it can set up
# things for both the master and slaves?
#
if [ -z "$AMI_IMAGE" ]; then
    echo '$AMI_IMAGE'" not set."
    if [ "$INSTANCE_TYPE" == "m1.small" ] && [ -n "$AMI_IMAGE_M1_SMALL" ]; then
        echo 'Using $AMI_IMAGE_M1_SMALL'" ($AMI_IMAGE_M1_SMALL)."
        AMI_IMAGE=$AMI_IMAGE_M1_SMALL
    elif [ "$INSTANCE_TYPE" == "m1.large" ] && [ -n "$AMI_IMAGE_M1_LARGE" ]; then
        echo 'Using $AMI_IMAGE_M1_LARGE'" ($AMI_IMAGE_M1_LARGE)."
        AMI_IMAGE=$AMI_IMAGE_M1_LARGE
    else
        if [ -z "$AMI_GREP_PATTERN" ]; then
            if [ "$INSTANCE_TYPE" == "m1.small" ] || [ "$INSTANCE_TYPE" == "c1.medium" ]; then
              AMI_GREP_PATTERN="${HADOOP_VERSION}-i386"
            else
              AMI_GREP_PATTERN="${HADOOP_VERSION}-x86_64"
            fi
        fi
        echo "Searching for an available AMI matching '$AMI_GREP_PATTERN'..."
        AMI_IMAGE=`ec2-describe-images -x all | grep $AMI_GREP_PATTERN | grep available | awk '{print $2}'`
        if [ -z "$AMI_IMAGE" ]; then
            echo "Unable to find a matching image!"
            exit -1
        fi
        echo "Found matching image ($AMI_IMAGE)."
    fi
fi

# Resolve several variable values within hadoop-ec2-init-remote.sh, to create a script
# that will be installed on the master and executed there during the boot sequence.
#
# TODO CSc Should we put .user_data_file.master into $PROJECT_BASEDIR?
# TODO CSc Should we leave it there vs. deleting it so we know what it contained?
#
echo "Starting master with AMI $AMI_IMAGE."
sed -e "s|%AWS_ACCESS_KEY_ID%|$AWS_ACCESS_KEY_ID|" \
    -e "s|%AWS_SECRET_ACCESS_KEY%|$AWS_SECRET_ACCESS_KEY|" \
    -e "s|%INSTANCE_TYPE%|$INSTANCE_TYPE|" \
    -e "s|%EXTRA_CORE_SITE_PROPERTIES%|$EXTRA_CORE_SITE_PROPERTIES|" \
    -e "s|%EXTRA_HDFS_SITE_PROPERTIES%|$EXTRA_HDFS_SITE_PROPERTIES|" \
    -e "s|%EXTRA_MAPRED_SITE_PROPERTIES%|$EXTRA_MAPRED_SITE_PROPERTIES|" \
       "$USER_DATA_FILE_TEMPLATE" > .user_data_file.master

# Try removing comments from user data file if it exceeds 16K.
# On each line except for the very first (which has #!/usr/bin/env bash),
# we remove everything from the first # character to the end of the line,
# but not if the # has anything but whitespace before it.
let USER_DATA_SIZE=`wc -c .user_data_file.master | awk '{print $1}'`
if [ $USER_DATA_SIZE -gt 16384 ]; then
    echo "Removing comments from master user data file as it exceeds 16K"
    sed -e "1!s|^#.*||" -e "1!s|[ \t]#.*||" .user_data_file.master > .user_data_file.master.stripped
    mv -f .user_data_file.master.stripped .user_data_file.master
    let USER_DATA_SIZE=`wc -c .user_data_file.master | awk '{print $1}'`
    if [ $USER_DATA_SIZE -gt 16384 ]; then
        echo "Master user data file still exceeds 16K. Try trimming $USER_DATA_FILE_TEMPLATE (and EXTRA_CORE_SITE_PROPERTIES, etc.) by hand."
        exit -1
    fi
fi

# Launch the master instance
INSTANCE=`ec2-run-instances $AMI_IMAGE -n 1 -g $CLUSTER_MASTER -k $KEY_NAME -f .user_data_file.master -t $INSTANCE_TYPE $KERNEL_ARG | grep INSTANCE | awk '{print $2}'`

rm .user_data_file.master

echo "Waiting for instance $INSTANCE to start..."
while true; do
  printf "."
  # get private dns
  MASTER_HOST=`ec2-describe-instances $INSTANCE | grep running | awk '{print $5}'`
  if [ -n "$MASTER_HOST" ]; then
    echo "Started as $MASTER_HOST"
    break;
  fi
  sleep 1
done

# Save away cluster description in user's home directory where other scripts
# can access it.
# 
# TODO CSc Copy these three files to S3 as well?
#
MASTER_EC2_HOST=`ec2-describe-instances $INSTANCE | grep INSTANCE | grep running | grep $MASTER_HOST | awk '{print $4}'`
echo $MASTER_HOST > $MASTER_PRIVATE_IP_PATH
echo $MASTER_EC2_HOST > $MASTER_IP_PATH
MASTER_EC2_ZONE=`ec2-describe-instances $INSTANCE | grep INSTANCE | grep running | grep $MASTER_HOST | awk '{print $11}'`
echo $MASTER_EC2_ZONE > $MASTER_ZONE_PATH

while true; do
  REPLY=`ssh $SSH_OPTS "root@$MASTER_EC2_HOST" 'echo "hello"'`
  if [ -n "$REPLY" ]; then
   break;
  fi
  sleep 5
done

echo "Copying private key to master..."
scp $SSH_OPTS $PRIVATE_KEY_PATH "root@$MASTER_EC2_HOST:/root/.ssh/id_rsa"
ssh $SSH_OPTS "root@$MASTER_EC2_HOST" "chmod 600 /root/.ssh/id_rsa"

MASTER_IP=`dig +short $MASTER_EC2_HOST`
echo "Master is $MASTER_EC2_HOST, ip is $MASTER_IP, zone is $MASTER_EC2_ZONE."
