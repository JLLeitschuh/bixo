#!/usr/bin/env bash

# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Launch a set of EC2 Hadoop slave instances to do the bidding of
# a previously launched master instance:
# launch-hadooop-slaves <cluster> <#slaves> [<type> [<price>]]

if [ -z $1 ]; then
  echo "Cluster name required!"
  exit -1
fi

if [ -z $2 ]; then
  echo "You must specify the number of slaves to start."
  exit -1
fi

CLUSTER=$1
NUM_SLAVES=$2
INSTANCE_TYPE=${3}
SPOT_PRICE=$4

# Import variables
bin=`dirname "$0"`
bin=`cd "$bin"; pwd`
. ${HADOOP_EC2_ENV:-$bin/hadoop-ec2-env.sh}

if [ ! -f $MASTER_IP_PATH ]; then
  echo "You must launch the cluster's master node first!"
  exit -1
fi

if [ -n "$INSTANCE_TYPE" ]; then
  if [ -n "$REQUIRED_INSTANCE_TYPE" ] && [ "$INSTANCE_TYPE" != "$REQUIRED_INSTANCE_TYPE" ]; then
    echo "This project requires $REQUIRED_INSTANCE_TYPE instances (see REQUIRED_INSTANCE_TYPE in $PROJECT_EC2_BASEDIR/setenv.sh)"
    exit -1
  fi
else
  echo 'Instance <type> parameter not specified - using $DEFAULT_INSTANCE_TYPE'" ($DEFAULT_INSTANCE_TYPE)."
  INSTANCE_TYPE=$DEFAULT_INSTANCE_TYPE
fi

# Find an appropriate Amazon Machine Image.
# If $AMI_IMAGE is not set, we look for an AMI matching $INSTANCE_TYPE among those
# accessible by this user (including the public ones).
#
# TODO CSc Move this to launch-hadoop-cluster (exporting variables) so it can set up
# things for both the master and slaves?
#
if [ -z "$AMI_IMAGE" ]; then
    echo '$AMI_IMAGE'" not set."
    if [ "$INSTANCE_TYPE" == "m1.small" ] && [ -n "$AMI_IMAGE_M1_SMALL" ]; then
        echo 'Using $AMI_IMAGE_M1_SMALL'" ($AMI_IMAGE_M1_SMALL)."
        AMI_IMAGE=$AMI_IMAGE_M1_SMALL
    elif [ "$INSTANCE_TYPE" == "m1.large" ] && [ -n "$AMI_IMAGE_M1_LARGE" ]; then
        echo 'Using $AMI_IMAGE_M1_LARGE'" ($AMI_IMAGE_M1_LARGE)."
        AMI_IMAGE=$AMI_IMAGE_M1_LARGE
    else
        if [ -z "$AMI_GREP_PATTERN" ]; then
            if [ "$INSTANCE_TYPE" == "m1.small" ] || [ "$INSTANCE_TYPE" == "c1.medium" ]; then
              AMI_GREP_PATTERN="${HADOOP_VERSION}-i386"
            else
              AMI_GREP_PATTERN="${HADOOP_VERSION}-x86_64"
            fi
        fi
        echo "Searching for an available AMI matching '$AMI_GREP_PATTERN'..."
        AMI_IMAGE=`ec2-describe-images -x all | grep $AMI_GREP_PATTERN | grep available | awk '{print $2}'`
        if [ -z "$AMI_IMAGE" ]; then
            echo "Unable to find a matching image!"
            exit -1
        fi
        echo "Found matching image ($AMI_IMAGE)."
    fi
fi

# Retrieve cluster description from user's home directory where launch-hadoop-master
# has saved it.
MASTER_HOST=`cat $MASTER_PRIVATE_IP_PATH`
MASTER_ZONE=`cat $MASTER_ZONE_PATH`

# Resolve several variable values within hadoop-ec2-init-remote.sh, to create a script
# that will be installed on the slaves and executed there during the boot sequence.
sed -e "s|%MASTER_HOST%|$MASTER_HOST|" \
    -e "s|%AWS_ACCESS_KEY_ID%|$AWS_ACCESS_KEY_ID|" \
    -e "s|%AWS_SECRET_ACCESS_KEY%|$AWS_SECRET_ACCESS_KEY|" \
    -e "s|%INSTANCE_TYPE%|$INSTANCE_TYPE|" \
    -e "s|%EXTRA_CORE_SITE_PROPERTIES%|$EXTRA_CORE_SITE_PROPERTIES|" \
    -e "s|%EXTRA_HDFS_SITE_PROPERTIES%|$EXTRA_HDFS_SITE_PROPERTIES|" \
    -e "s|%EXTRA_MAPRED_SITE_PROPERTIES%|$EXTRA_MAPRED_SITE_PROPERTIES|" \
       "$USER_DATA_FILE_TEMPLATE" > .user_data_file.slave

# Try removing comments from user data file if it exceeds 16K.
# On each line except for the very first (which has #!/usr/bin/env bash),
# we remove everything from the first # character to the end of the line,
# but not if the # has anything but whitespace before it.
let USER_DATA_SIZE=`wc -c .user_data_file.slave | awk '{print $1}'`
if [ $USER_DATA_SIZE -gt 16384 ]; then
    echo "Removing comments from slave user data file as it exceeds 16K"
    sed -e "1!s|^#.*||" -e "1!s|[ \t]#.*||" .user_data_file.slave > .user_data_file.slave.stripped
    mv -f .user_data_file.slave.stripped .user_data_file.slave
    let USER_DATA_SIZE=`wc -c .user_data_file.slave | awk '{print $1}'`
    if [ $USER_DATA_SIZE -gt 16384 ]; then
        echo "Slave user data file still exceeds 16K. Try trimming $USER_DATA_FILE_TEMPLATE (and EXTRA_CORE_SITE_PROPERTIES, etc.) by hand."
        exit -1
    fi
fi

# Launch all the slave instances
if [ -z "$SPOT_PRICE" ]; then
    echo "Adding $NUM_SLAVES node(s) to cluster group $CLUSTER with AMI $AMI_IMAGE"
    ec2-run-instances $AMI_IMAGE -n "$NUM_SLAVES" -g "$CLUSTER" -k "$KEY_NAME" -f .user_data_file.slave -t "$INSTANCE_TYPE" -z "$MASTER_ZONE" $KERNEL_ARG | grep INSTANCE | awk '{print $2}'
else
    echo "Requesting $NUM_SLAVES (max price $SPOT_PRICE) spot instance node(s) for cluster group $CLUSTER with AMI $AMI_IMAGE"
    ec2-request-spot-instances $AMI_IMAGE \
        --price "$SPOT_PRICE" \
        --instance-count "$NUM_SLAVES" \
        --launch-group "$CLUSTER" \
        --group "$CLUSTER" \
        -k "$KEY_NAME" \
        --user-data-file .user_data_file.slave \
        --instance-type "$INSTANCE_TYPE" \
        --availability-zone-group "$MASTER_ZONE" \
        $KERNEL_ARG \
        | grep SPOTINSTANCEREQUEST | awk '{print $2}'
fi
rm .user_data_file.slave
